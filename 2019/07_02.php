<?php

$permutations = [
[5,6,7,8,9],[5,6,7,9,8],[5,6,8,7,9],[5,6,8,9,7],[5,6,9,7,8],[5,6,9,8,7],[5,7,6,8,9],[5,7,6,9,8],[5,7,8,6,9],[5,7,8,9,6],[5,7,9,6,8],[5,7,9,8,6],[5,8,6,7,9],[5,8,6,9,7],[5,8,7,6,9],[5,8,7,9,6],[5,8,9,6,7],[5,8,9,7,6],[5,9,6,7,8],[5,9,6,8,7],[5,9,7,6,8],[5,9,7,8,6],[5,9,8,6,7],[5,9,8,7,6],[6,5,7,8,9],[6,5,7,9,8],[6,5,8,7,9],[6,5,8,9,7],[6,5,9,7,8],[6,5,9,8,7],[6,7,5,8,9],[6,7,5,9,8],[6,7,8,5,9],[6,7,8,9,5],[6,7,9,5,8],[6,7,9,8,5],[6,8,5,7,9],[6,8,5,9,7],[6,8,7,5,9],[6,8,7,9,5],[6,8,9,5,7],[6,8,9,7,5],[6,9,5,7,8],[6,9,5,8,7],[6,9,7,5,8],[6,9,7,8,5],[6,9,8,5,7],[6,9,8,7,5],[7,5,6,8,9],[7,5,6,9,8],[7,5,8,6,9],[7,5,8,9,6],[7,5,9,6,8],[7,5,9,8,6],[7,6,5,8,9],[7,6,5,9,8],[7,6,8,5,9],[7,6,8,9,5],[7,6,9,5,8],[7,6,9,8,5],[7,8,5,6,9],[7,8,5,9,6],[7,8,6,5,9],[7,8,6,9,5],[7,8,9,5,6],[7,8,9,6,5],[7,9,5,6,8],[7,9,5,8,6],[7,9,6,5,8],[7,9,6,8,5],[7,9,8,5,6],[7,9,8,6,5],[8,5,6,7,9],[8,5,6,9,7],[8,5,7,6,9],[8,5,7,9,6],[8,5,9,6,7],[8,5,9,7,6],[8,6,5,7,9],[8,6,5,9,7],[8,6,7,5,9],[8,6,7,9,5],[8,6,9,5,7],[8,6,9,7,5],[8,7,5,6,9],[8,7,5,9,6],[8,7,6,5,9],[8,7,6,9,5],[8,7,9,5,6],[8,7,9,6,5],[8,9,5,6,7],[8,9,5,7,6],[8,9,6,5,7],[8,9,6,7,5],[8,9,7,5,6],[8,9,7,6,5],[9,5,6,7,8],[9,5,6,8,7],[9,5,7,6,8],[9,5,7,8,6],[9,5,8,6,7],[9,5,8,7,6],[9,6,5,7,8],[9,6,5,8,7],[9,6,7,5,8],[9,6,7,8,5],[9,6,8,5,7],[9,6,8,7,5],[9,7,5,6,8],[9,7,5,8,6],[9,7,6,5,8],[9,7,6,8,5],[9,7,8,5,6],[9,7,8,6,5],[9,8,5,6,7],[9,8,5,7,6],[9,8,6,5,7],[9,8,6,7,5],[9,8,7,5,6],[9,8,7,6,5]
];

$puzzle_code = '3,8,1001,8,10,8,105,1,0,0,21,46,55,76,89,106,187,268,349,430,99999,3,9,101,4,9,9,1002,9,2,9,101,5,9,9,1002,9,2,9,101,2,9,9,4,9,99,3,9,1002,9,5,9,4,9,99,3,9,1001,9,2,9,1002,9,4,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,1001,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,4,9,1001,9,4,9,102,5,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,99';

$test_values = [
	[
		'pss'    => [9,8,7,6,5],
		'code'   => 
			'3,26,1001,26,-4,
			26,3,27,1002,27,
			2,27,1,27,26,27,
			4,27,1001,28,-1,
			28,1005,28,6,99,
			0,0,5',
		'result' => 139629729,
	],
	[
		'pss'    => [9,7,8,5,6],
		'code'   => '3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10',
		'result' => 18216,
	],
];

require('intcode_class.php');
/*
$amp = new Intcode($test_values[0]['code']);
echo $amp->dump_memory();
#$amp = new Intcode('1,0,0,0,99');
#$amp = new Intcode('1002,4,3,4,33');
$amp->run_code();#[1]);
echo "run again\n";
$amp->run_code();
echo $amp->dump_memory();
*/

$test_value = $test_values[1];
#run_amps($test_values[1]['code'], $test_values[1]['pss'] );
function run_amps($code, $pss) {
	
	$amps = [
		new Intcode($code, 'amp0'),
		new Intcode($code, 'amp1'),
		new Intcode($code, 'amp2'),
		new Intcode($code, 'amp3'),
		new Intcode($code, 'amp4'),
	];

	// setup each amp with their pss
	for($i = 0; $i< 5 ; $i++) {
		$amps[$i]->run_code([$pss[$i]]);
	}
	#init
	$result = $amps[0]->run_code([0]);
	#die();

	$exit = false;

	while(!$exit) {
		try {
			$result = $amps[1]->run_code([$result]);
		} catch (ExitException $e) {
			$exit = true;
		}

		try {
			$result = $amps[2]->run_code([$result]);

		} catch (ExitException $e) {
			$exit = true;
		}

		try {
			$result = $amps[3]->run_code([$result]);

		} catch (ExitException $e) {
			$exit = true;
		}

		try {
			$result = $amps[4]->run_code([$result]);

		} catch (ExitException $e) {
			$exit = true;
		}

		try {
			$result = $amps[0]->run_code([$result]);

		} catch (ExitException $e) {
			$exit = true;
		}

	}
	return $result;
}

$result = [];
foreach($permutations as $pss) {
	
	$r = run_amps($puzzle_code, $pss);
	var_dump($r);
	$result[] = $r;
}

var_dump(max($result));